[
    "bash                    | bash\n \\                      |  \\\n  cat (SIGQUIT:SIG_DFL) |   a.out (SIGQUIT:SIG_IGN)\n                        |    \\\n                        |     cat (SIGQUIT:SIG_DFL)\n------------------------+--------------------------\nHere bash notices cat's | Here bash is unaware of\nabnormal termination    | any grandchildren at all",
    "const HasArray* collection[] = {\n    &(HasArray){.num_elements = 2, .elements = {51, 17}},\n    &(HasArray){.num_elements = 4, .elements = {1, 42, 88, 73}}\n};",
    "int WINAPI MessageBoxA(\n  [in, optional] HWND   hWnd,\n  [in, optional] LPCSTR lpText,\n  [in, optional] LPCSTR lpCaption,\n  [in]           UINT   uType\n);",
    "DWORD WINAPI ThreadProc(\n  _In_ LPVOID lpParameter\n);",
    "struct Tuple {\n    unsigned char a : 4;\n    unsigned char b : 4;\n};",
    "tree_t *tree_plant( void *data, size_t data_size ) {\n   // ...\n\n   tree_t *sapling = NULL;\n   void *tree_data = NULL;\n\n   sapling = malloc( sizeof( tree_t ) );\n   if ( !sapling )\n      goto ERROR;\n\n   tree_data = malloc( data_size );\n   if ( !tree_data )\n      goto ERROR;\n\n   list_t *tree_children = list_create();\n   if ( !tree_children )\n      goto ERROR;\n\n   // ...   \n\n   return sapling;\n\nERROR:\n   free( tree_data );\n   free( sapling );\n   return NULL;\n}",
    "tree_t *tree_plant( void *data, size_t data_size ) {\n   // ...\n\n   tree_t *sapling = malloc( sizeof( tree_t ) );\n   if ( !sapling )\n      goto ERROR1;\n\n   void *tree_data = malloc( data_size );\n   if ( !tree_data )\n      goto ERROR2;\n\n   list_t *tree_children = list_create();\n   if ( !tree_children )\n      goto ERROR3;\n\n   // ...   \n\n   return sapling;\n\nERROR3:\n   free( tree_data );\nERROR2:\n   free( sapling );\nERROR1:\n   return NULL;\n}",
    "bool test( void ) {\n   bool rv = false;\n   \n   FILE *f1 = fopen( ... );\n   if ( !f1 ) {\n      // Output relevant error message here.\n      goto ERROR1;\n   }\n\n   FILE *f2 = fopen( ... );\n   if ( !f2 ) {\n      // Output relevant error message here.\n      goto ERROR2;\n   }\n\n   // Do something with file handles here.\n\n   rv = true; \n\n   fclose( f2 );\nERROR2:\n   fclose( f1 );\nERROR1:\n   return rv;\n}",
    "#include <wordexp.h>\n\n#define WORDEXP_RESULT(X)                 \\\n/*  code          custom error message */ \\\n  X(WRDE_BADCHAR, \"Bad char is bad!\")     \\\n  X(WRDE_BADVAL,  \"Bad value is bad!\")    \\\n  // and so on...",
    "int result = wordexp(...);\nswitch(result)\n{\n  case 0: /* ok */ break;\n  WORDEXP_RESULT(WORDEXP_ERR_CASE)\n};",
    "#define WORDEXP_ERR_CASE(val, str)                 \\\n  case (val):                                      \\\n  {                                                \\\n    fprintf(stderr,                                \\\n            \"Error: wordexp failed. Code: %s. %s\", \\\n            #val, str);                            \\\n    break;                                         \\\n  }",
    "Error: wordexp failed. Code: WRDE_BADCHAR. Bad char is bad!",
    "if(result != 0)\n{\n  const char* wordexp_errmsg[] = \n  {\n    [WRDE_BADCHAR] = \"Bad char is bad!\",\n    [WRDE_BADVAL]  = \"Bad value is bad!\"\n  };\n\n  fprintf(stderr, \"Error: wordexp failed. %s\\n\", wordexp_errmsg[result]);\n}",
    "uint32_t sum1(const struct mystruct *s,uintptr_t n){\n    uint32_t result=0;\n    const uint8_t* u8 = (const uint8_t*)s;\n    for(uintptr_t i=0; i<n*4; i+=4)\n      result += *(uint32_t*) &u8[i];\n    return result;\n}\n\nuint32_t sum2(const struct mystruct *s,uintptr_t n){\n    uint32_t result=0;\n    const uint8_t* u8 = (const uint8_t*)s;\n    for(uintptr_t i=0; i<n*4; i+=4)\n      result += *(uint32_t*) &i[u8];\n    return result;\n}\n\nuint32_t sum3(const struct mystruct *s,uintptr_t n){\n    uint32_t result=0;\n    const uint8_t* u8 = (const uint8_t*)s;\n    for(uintptr_t i=0; i<n*4; i+=4)\n      result += *(uint32_t*) (u8+i);\n    return result;\n}",
    "#define countof(a) (sizeof(a)/sizeof(*(a)))",
    "// !!! This definition is equivalent to void initialize_array(char *buf)\nvoid initialize_array(char buf[1024]) {\n    // BUG! sizeof(buf) is sizeof(char *), much less than 1024\n    memset(buf, 0, sizeof(buf));\n}",
    "...\n    char buf[2048];\n    const size_t buf_size = sizeof(buf); // always next to the array definition\n    \n    memset(buf, 0, buf_size);\n    \n    ... = snprintf(buf, buf_size, ...);\n    \n    ...",
    "...\n    int buf[2048];\n    const size_t buf_count = sizeof(buf) / sizeof(*buf);\n    \n    memset(buf, 0, buf_count * sizeof(*buf));\n    \n    for (size_t i = 0; i < buf_count; i++) {\n        if (handle_case(i))\n            bur[i] = 1;\n    }\n    ...",
    "movdqu  xmm0, XMMWORD PTR [rax]\n        add     rax, 16\n        pand    xmm0, xmm6\n        movdqa  xmm2, xmm0\n        movdqa  xmm1, xmm0\n        pcmpgtb xmm0, xmm5\n        paddb   xmm2, xmm4\n        paddb   xmm1, xmm3\n        pand    xmm1, xmm0\n        pandn   xmm0, xmm2\n        por     xmm0, xmm1\n        movups  XMMWORD PTR [rax-16], xmm0",
    "c:\n        test    rdi, rdi\n        je      .L1\n        add     rdi, rsi\n.L3:\n        movzx   eax, BYTE PTR [rsi]\n        add     rsi, 1\n        and     eax, 15\n        movzx   eax, BYTE PTR HEX_CHARS[rax]\n        mov     BYTE PTR [rsi-1], al\n        cmp     rdi, rsi\n        jne     .L3\n.L1:\n        ret\nHEX_CHARS:\n        .ascii  \"0123456789ABCDEF\"",
    "a() took 1.089963 sec\nb() took 2.084695 sec\nc() took 3.504775 sec\nd() took 3.938886 sec",
    "a() took 0.988197 sec\nb() took 1.905577 sec\nc() took 3.507487 sec\nd() took 3.866236 sec",
    "{\n    \"editor.semanticHighlighting.enabled\": true,\n    \"editor.semanticTokenColorCustomizations\": \n    {\n        \"rules\": \n        {\n            \"type\":\n            {\n                \"foreground\": \"#6c9ada\"\n            }\n        }\n    }\n}",
    "__declspec(dllexport)\nvoid affect_array(int *ptr, int rows, int cols, int depth) {\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            for(int k = 0; k < depth; k++) {\n                ptr[i*cols*depth + j*depth + k] *= 2;\n            }\n        }\n    }\n}",
    "import ctypes as ct\nimport numpy as np\n\narr = np.array([[[1, 2, 3, 4],\n                 [5, 6, 7, 8],\n                 [9, 10, 11, 12]],\n                [[13, 14, 15, 16],\n                 [17, 18, 19, 20],\n                 [21, 22, 23, 24]]], dtype=np.int32)\n\nlib = ct.CDLL('./test')\naffect_array = lib.affect_array\n# Require 3D numpy array of int32 as first parameter.  It will be type-checked.\naffect_array.argtypes = np.ctypeslib.ndpointer(dtype=np.int32, ndim=3), ct.c_int, ct.c_int, ct.c_int\naffect_array.restype = None\n\nprint('Original array =')\nprint(arr)\nprint()\naffect_array(arr, *arr.shape)  # * unpacks tuple as 3 additional parameters.\nprint('Array after pass to function =')\nprint(arr)",
    "Original array =\n[[[ 1  2  3  4]\n  [ 5  6  7  8]\n  [ 9 10 11 12]]\n\n [[13 14 15 16]\n  [17 18 19 20]\n  [21 22 23 24]]]\n\nArray after pass to function =\n[[[ 2  4  6  8]\n  [10 12 14 16]\n  [18 20 22 24]]\n\n [[26 28 30 32]\n  [34 36 38 40]\n  [42 44 46 48]]]",
    "#include <stdio.h>\n#include <stdlib.h>\n\nvoid effect_array(int ***ptr, int rows, int cols, int depth)\n{\n    for(int i = 0; i < rows; i++)\n    {\n        for(int j = 0; j < cols; j++)\n        {\n            for(int k = 0; k < depth; k++)\n            {\n                ptr[i][j][k] *= 2;\n            }\n        }\n    }\n}\n\nint main()\n{\n    int arr[2][2][2] = {\n        {\n            {1, 2},\n            {3, 4}\n        },\n        {\n            {5, 6},\n            {7, 8}\n        }\n    };\n\n    // Allocate memory for rows\n    int ***ptr = (int ***)malloc(2 * sizeof(int **));\n\n    // Allocate memory for columns in each row\n    for(int i = 0; i < 2; i++)\n    {\n        ptr[i] = (int **)malloc(2 * sizeof(int *));\n        for(int j = 0; j < 2; j++)\n        {\n            // Point to the correct part of the original array\n            ptr[i][j] = &arr[i][j][0];\n        }\n    }\n\n    \n    printf(\"Array before:\\n\");\n    for(int i = 0; i < 2; i++)\n    {\n        for(int j = 0; j < 2; j++)\n        {\n            for(int k = 0; k < 2; k++)\n            {\n                printf(\"%d \", arr[i][j][k]);\n            }\n            printf(\"\\n\");\n        }\n        printf(\"\\n\");\n    }\n\n    \n    effect_array(ptr, 2, 2, 2);\n\n    \n    printf(\"Array after:\\n\");\n    for(int i = 0; i < 2; i++)\n    {\n        for(int j = 0; j < 2; j++)\n        {\n            for(int k = 0; k < 2; k++)\n            {\n                printf(\"%d \", arr[i][j][k]);\n            }\n            printf(\"\\n\");\n        }\n        printf(\"\\n\");\n    }\n\n    \n    for(int i = 0; i < 2; i++)\n    {\n        free(ptr[i]);\n    }\n    free(ptr);\n\n    return 0;\n}",
    "if (ch <= '9' && ch >= '0')\n        push(ch);\n    else if (ch != '=') {\n        sec_op = pull() - 48;\n        first_op = pull() - 48;",
    "if (ch <= '9' && ch >= '0')\n        push(ch - '0');\n    else if (ch != '=') {\n        sec_op = pull();\n        first_op = pull();",
    "$ make so\ncc -O2 -pipe  so.c  -o so\nso.c:30:2: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]\n   30 |         realloc(chaine1, sizeof(char)*(taille1+taille2+1));\n      |         ^~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1 warning generated.",
    "chaine1 = realloc(chaine1, sizeof(char)*(taille1 + taille2 + 1));",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <string.h>\n\nint main()\n{   \n    char* chaine1 = (char*)malloc(10*sizeof(char));\n    char* chaine2 = (char*)malloc(10*sizeof(char));\n   \n    if(chaine1 == NULL || chaine2 == NULL)\n        return -2;\n   \n    strcpy(chaine1, \"Salut les\");\n    strcpy(chaine2, \" codeurs!\");\n   \n    printf(\"Chaine 1: %s\\n\", chaine1);\n    printf(\"Chaine 2: %s\\n\", chaine2);\n   \n    int taille1 = strlen(chaine1);\n    int taille2 = strlen(chaine2);\n   \n    char* tmp_chaine = (char*)malloc(sizeof(char)*10);\n   \n    if(tmp_chaine == NULL)\n        return -2;\n   \n    strcpy(tmp_chaine, chaine1);\n   \n    chaine1 = realloc(chaine1, sizeof(char)*(taille1+taille2+1));\n\n    if (chaine1 == NULL)\n        return -3;\n   \n    for(int i = 0; i <= taille1; i++)\n        chaine1[i] = tmp_chaine[i];\n\n    for(int i = 0; i <= taille2; i++)\n        chaine1[taille1+i] = chaine2[i];\n\n    printf(\"%s\", chaine1);\n\n    return 0;\n}",
    "typedef struct cmp\n{\n    int64_t file1LineCount;\n    char file1Lines[20][100];\n    int64_t file2LineCount;\n    char file2Lines[20][100];\n    int64_t shortest_edit_path;\n} Comparison_t;",
    "int main()\n{\n    Comparison_t * work = malloc(sizeof(Comparison_t));\n\n    work->file1LineCount = 2;\n    strcpy(work->file1Lines[0], \"C_Programs/Console/FileCompare/bin/Release\");\n    work->file2LineCount = 2;\n    strcpy(work->file2Lines[0], \"C_Programs/Console/FileCompare/bin/Test\");\n    work->shortest_edit_path = 55;\n\n    int ** test = MakeMoveSet(work);\n\n    printf(\"Address of test: %p\\n\", test);\n\n    return 0;\n}",
    "path[k] = x;\n\n            printf(\"k value: %d\\n\", k);                     /* Visual debug print statement */\n\n            fprintf(stderr, \"x = %d, y=%d\\n\", x, y);\n\n            if (x >= n && y >= m)\n            {\n                free(path); //Segfault occurs here\n                fprintf(stderr, \"Bailing\\n\");\n                comp->shortest_edit_path = d;\n                fprintf(stderr, \"Shortest edit path = %d\\n\", d);\n                return moveset;\n            }",
    "craig@Vera:~/C_Programs/Console/FileCompare/bin/Release$ ./FileCompare \nmax_tries=4, max_index=9\nd=0,k=0\nk value: 0\nx = 0, y=0\nd=1,k=-1\nk value: -1\nx = 0, y=1\nd=1,k=1\nk value: 1\nx = 1, y=0\nd=2,k=-2\nk value: -2\nx = 0, y=2\nd=2,k=0\nk value: 0\nx = 2, y=2\nfree(): invalid pointer\nAborted (core dumped)",
    "if (k >= 0 && k < max_tries)                    /* Boundary testing             */\n            path[k] = x;\n\n        printf(\"k value: %d\\n\", k);                     /* Visual debug print statement */\n\n        fprintf(stderr, \"x = %d, y=%d\\n\", x, y);\n\n        if (x >= n && y >= m)\n        {\n            free(path); //Segfault occurs here\n            fprintf(stderr, \"Bailing\\n\");\n            comp->shortest_edit_path = d;\n            fprintf(stderr, \"Shortest edit path = %d\\n\", d);\n            return moveset;\n        }",
    "craig@Vera:~/C_Programs/Console/FileCompare/bin/Release$ ./FileCompare \nmax_tries=4, max_index=9\nd=0,k=0\nk value: 0\nx = 0, y=0\nd=1,k=-1\nk value: -1\nx = 0, y=1\nd=1,k=1\nk value: 1\nx = 1, y=0\nd=2,k=-2\nk value: -2\nx = 0, y=2\nd=2,k=0\nk value: 0\nx = 2, y=2\nBailing\nShortest edit path = 2\nAddress of test: 0x563c29420280",
    "typedef long long ll;\n\nll pop(ll *hp, size_t used, ll y)\n{\n    ll w=(((y|1)<used)&&(hp[y|1]>=hp[y]))?(y|1):y;\n    return w;\n}\n\nll pop1(ll *hp, size_t used, ll y)\n{\n    ll w=y|(((y|1)<used)&&(hp[y|1]>=hp[y]));\n    return w;\n}",
    "pop:\n        mov     rax, rdx\n        or      rdx, 1\n        cmp     rdx, rsi\n        jnb     .L2\n        mov     rcx, QWORD PTR [rdi+rax*8]\n        cmp     QWORD PTR [rdi+rdx*8], rcx\n        cmovge  rax, rdx\n.L2:\n        ret\npop1:\n        mov     rax, rdx\n        or      rdx, 1\n        cmp     rdx, rsi\n        jnb     .L6\n        mov     rcx, QWORD PTR [rdi+rax*8]\n        cmp     QWORD PTR [rdi+rdx*8], rcx\n        setge   dl\n        movzx   edx, dl\n        or      rax, rdx\n.L6:\n        ret",
    "printf(\"resulted index : %d for 16 bit value %04X\\n\",idx, bk);",
    "idx = (int) sqrt( (bk*(bk ^ 1))&0xFFFF);",
    "void receiveHTTP(int clientSockfd, char *buff, size_t __n, int __flags)\n{\n    int bytes = recv(clientSockfd, buff, __n, __flags);\n    if (bytes <= 0) return;\n\n    // prints the whole thing...\n    printf(\"%.*s\",bytes,buff);\n    // or: fwrite(buff, bytes, 1, stdout);\n    // or: write(STDOUT_FILENO, buff, bytes);\n\n    // prints everything ignoring line breaks...\n    for (int i = 0; i < bytes; ++i)\n    {\n        if (buff[i] != '\\r' && buff[i] != '\\n'){\n            printf(\"%c\", buff[i]);\n        }\n    }\n}",
    ".requestMatchers(\"/error\").permitAll().",
    "org.springframework.web.bind.annotation.RequestMapping;\norg.springframework.web.bind.annotation.RestController;",
    "mainClass.set('webserver.blog.BlogApplication');",
    "WebDriver driver = new ChromeDriver();\ndriver.get(\"https://play1.automationcamp.ir/forms.html\");\n\ndriver.findElement(By.id(\"validationCustom03\")).sendKeys(\"City\");\ndriver.findElement(By.id(\"validationCustom04\")).sendKeys(\"State\");\ndriver.findElement(By.id(\"validationCustom05\")).sendKeys(\"Zip\");\ndriver.findElement(By.id(\"invalidCheck\")).click();\nWebElement submitFormButton = driver.findElement(By.xpath(\"//button[text()='Submit Form']\"));\nsubmitFormButton.click();\n\nWebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\nwait.until(ExpectedConditions.stalenessOf(submitFormButton));\nboolean cityErrorIsDisplayed = driver.findElement(By.id(\"invalid_city\")).isDisplayed();\nboolean stateErrorIsDisplayed = driver.findElement(By.id(\"invalid_state\")).isDisplayed();\nboolean zipErrorIsDisplayed = driver.findElement(By.id(\"invalid_zip\")).isDisplayed();\nboolean termsErrorIsDisplayed = driver.findElement(By.id(\"invalid_terms\")).isDisplayed();\n\nAssert.assertFalse(cityErrorIsDisplayed, \"Verify City error is not displayed\");\nAssert.assertFalse(stateErrorIsDisplayed, \"Verify State error is not displayed\");\nAssert.assertFalse(zipErrorIsDisplayed, \"Verify Zip error is not displayed\");\nAssert.assertFalse(termsErrorIsDisplayed, \"Verify Terms error is not displayed\");\n\ndriver.quit();",
    "import javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\n\npublic class VariableCssApp extends Application {\n\n    private static final String CSS_DATA_URL_TYPE = \"data:text/css,\";\n    private static final String CSS = CSS_DATA_URL_TYPE +\n            \"\"\"\n            .button {\n                -fx-padding: LABEL_PADDING_TOP LABEL_PADDING_RIGHT LABEL_PADDING_BOTTOM LABEL_PADDING_LEFT;\n                -fx-background-color: palegreen;\n            }\n            \"\"\"\n                    .replace(\"LABEL_PADDING_TOP\", \"10\")\n                    .replace(\"LABEL_PADDING_RIGHT\", \"20\")\n                    .replace(\"LABEL_PADDING_BOTTOM\", \"30\")\n                    .replace(\"LABEL_PADDING_LEFT\", \"40\");\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage stage) {\n        VBox root = new VBox(new Button(\"Button\"));\n        root.getStylesheets().add(CSS);\n        Scene scene = new Scene(root, 100, 100);\n        stage.setScene(scene);\n        stage.show();\n\n        System.out.println(\"Applied CSS:\\n\" + CSS);\n    }\n}",
    "@Data\n@Getter\n@Setter\npublic class SampleRequest{\n  @JsonProperty(\"sample-event\")\n  private String sampleEvent;\n\n  @JsonProperty(\"sample-id\")\n  private String sampleId;\n}",
    "@WebMvcTest(UserController.class)\n@Import(UserMapperImpl.class)\nclass UserControllerTest {\n\n    @MockitoBean\n    UserService userService;\n\n    @Autowired\n    MockMvc mockMvc;",
    "when(userService.findByLoginOrError(\"user1\")).thenReturn(<SOME VALUE HERE>);",
    "@MockitoBean\n    UserMapper userMapper;",
    "@SpringBootTest\n@AutoConfigureMockMvc\nclass UserControllerTests {\n\n    @Autowired\n    MockMvc mockMvc;\n\n    // remaining code left out",
    "compileOnly(\"org.mapstruct:mapstruct:1.6.3\")\n    annotationProcessor(\"org.mapstruct:mapstruct-processor:1.6.3\")",
    "spring.ssl.bundle.pem.mybundle.keystore.certificate=classpath:application.crt\nspring.ssl.bundle.pem.mybundle.keystore.private-key=classpath:application.key",
    "CREATE TABLE employee_settlement ( employee_id int, amount int, created_at date);\n\n\ninsert into employee_settlement values(1,950,'2024-12-01');\ninsert into employee_settlement values(1,1000,'2025-01-01');\ninsert into employee_settlement values(1,1050,'2025-02-01');",
    "WITH balance_cte AS (\n    SELECT \n        employee_id,\n        created_at,\n        amount AS change,\n        SUM(amount) OVER (PARTITION BY employee_id ORDER BY created_at) AS final_balance\n    FROM employee_settlement\n    WHERE employee_id = 1 -- Replace with a specific employee_id\n)\nSELECT \n    employee_id,\n    COALESCE(LAG(final_balance) OVER (PARTITION BY employee_id ORDER BY created_at), 0) AS start_balance,\n    change,\n    final_balance\nFROM balance_cte\nORDER BY created_at;",
    "array - 120",
    "result <= 0",
    "import multiprocessing\nimport numpy as np\nimport time\nimport copy\n\n\ndef bubble_sort(array):\n    n = len(array)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\n\n\ndef merge_chunks(left, right):\n    merged = []\n    left_index = 0\n    right_index = 0\n\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] <= right[right_index]:\n            merged.append(left[left_index])\n            left_index += 1\n        else:\n            merged.append(right[right_index])\n            right_index += 1\n\n    merged.extend(left[left_index:])\n    merged.extend(right[right_index:])\n    return merged\n\n\ndef parallel_bubble_sort(array):\n    num_processes = multiprocessing.cpu_count()  # Use all available cores\n    chunk_size = (len(array) + num_processes - 1) // num_processes\n    pool = multiprocessing.Pool(processes=num_processes)\n    \n    chunks = []\n    start = 0\n    for i in range(num_processes):\n        end = min((i + 1) * chunk_size, len(array))\n        chunks.append(array[start:end])\n        start = end\n    \n    results = pool.map(bubble_sort, chunks)\n    \n    pool.close()\n    pool.join()\n    \n    # Merge the sorted chunks\n    while len(results) > 1:\n        new_results = []\n        for i in range(0, len(results), 2):\n            if i + 1 < len(results):\n                merged_chunk = merge_chunks(results[i], results[i+1])\n                new_results.append(merged_chunk)\n            else:\n                new_results.append(results[i])\n        results = new_results\n    \n    return results[0]\n\n\n\nif __name__ == \"__main__\":\n    array_size = 10000\n    array = np.random.randint(0, 1000, array_size).tolist()\n    array_copy = copy.deepcopy(array)\n    \n    start_time = time.perf_counter()\n    sorted_array = bubble_sort(array)\n    end_time = time.perf_counter()\n    print(\"Bubble sort without multiprocessing: \", end_time - start_time)\n    \n    start_time = time.perf_counter()\n    sorted_array = parallel_bubble_sort(array_copy)\n    end_time = time.perf_counter()\n    print(\"Bubble sort with multiprocessing: \", end_time - start_time)",
    "Bubble sort without multiprocessing:  17.12360268399061\nBubble sort with multiprocessing:  1.380762806002167",
    "class A:\n    class Constants:\n        CT_A = 1.0\n        CT_B = 2.0\n        \n    def __init__(self):\n        ...\n        \n    def method_class(self):\n        return self.Constants.CT_A * (self.Constants.CT_B + 10.0)",
    "A.Constants.CT_A",
    "class Weekday:\n    class Order:\n        MONDAY = 0\n        TUESDAY = 1\n        WEDNESDAY = 2\n        THURSDAY = 3\n        FRIDAY = 4\n        SATURDAY = 5\n        SUNDAY = 6\n\n    def order_from_name(self, name):\n        return getattr(self.Order, name.upper())",
    "Weekday.Order.MONDAY",
    "@nb.jit(nb.float64[:, :](nb.float64[:, ::1], nb.float64[:, ::1]), fastmath=True, nopython=True)\ndef fastDot(X, Y):\n    return np.dot(X, Y)",
    "X = np.ascontiguousarray(X).copy()\neigenVectors = np.ascontiguousarray(eigenVectors).copy()",
    "import pandas as pd\nfrom openpyxl import load_workbook\nfrom openpyxl.styles import PatternFill\n\ndata = {\n    \"ID\": [1, 2, 3, 4, 5],\n    \"Status\": [\"OK\", \"NO\", \"OK\", \"NO\", \"OK\"]\n}\n\ndf = pd.DataFrame(data)\n\nexcel_filename = \"status.xlsx\"\ndf.to_excel(excel_filename, index=False)\n\nwb = load_workbook(excel_filename)\nws = wb.active\n\n# Define fill colors\ngreen_fill = PatternFill(start_color=\"00FF00\", end_color=\"00FF00\", fill_type=\"solid\")  # Green for \"OK\"\nred_fill = PatternFill(start_color=\"FF0000\", end_color=\"FF0000\", fill_type=\"solid\")    # Red for \"NO\"\n\n# Apply color based on cell value in the \"Status\" column\nfor row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=2, max_col=2):  \n    for cell in row:\n        if cell.value == \"OK\":\n            cell.fill = green_fill\n        elif cell.value == \"NO\":\n            cell.fill = red_fill\n\nwb.save(excel_filename)\n\nprint(\"Excel file created successfully!\")",
    "const chat = model.startChat({ history: chatHistory, generationConfig: { maxOutputTokens: 3000 }, });",
    "const chat = model.startChat({\n    generationConfig: { maxOutputTokens: 3000 },\n});",
    "const chatModal = document.getElementById(\"myForm\");\nconst myFunction = () => chatModal.style.display = chatModal.style.display !== \"block\" ? \"block\" : \"none\";\n  \ndocument.querySelector(\".chatButtons\").addEventListener(\"click\", myFunction);",
    "#myForm { display: none; }",
    "<button class=\"chatButtons\">button</button>\n\n\n<div class=\"chat-popup\" id=\"myForm\">\n  <div class=\"form-container\">\n  Form here\n  </div>\n</div>",
    "//       vvvvvvvvvvvvvvvvvvvvvv --- synchronous\nresult = result + (fruit + \": \" + (await resolveName(fruit)).length + \"\\n\");\n// ^^^^^                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --- aysnc",
    "const s = fruit + \": \" + (await resolveName(fruit)).length + \"\\n\";",
    "class Example {\n  hello = \"world\"\n}\n\n//pass an empty array for the constructor arguments\nconst obj = Reflect.construct(Example, []);\n\nconsole.log( obj instanceof Example );\nconsole.log( obj.hello );",
    "class Example {\n  hello = \"world\"\n}\n\nconst myConstruct = Reflect.construct.bind(null, Example, []);\n\nconst obj = myConstruct();\n\nconsole.log( obj instanceof Example );\nconsole.log( obj.hello );",
    "class Example1 {\n  hello = \"world\"\n}\n\nclass Example2 {\n  hello = \"Fred\"\n}\n\nconst myConstruct = _.partial(Reflect.construct, _, []);\n// placeholder for a constructor ----------------^\n\nconst obj1 = myConstruct(Example1);\nconst obj2 = myConstruct(Example2);\n\nconsole.log( obj1 instanceof Example1 );\nconsole.log( obj1.hello );\n\nconsole.log( obj2 instanceof Example2 );\nconsole.log( obj2.hello );",
    "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash-fp/0.10.4/lodash-fp.min.js\"></script>",
    "const construct = (constructor) => (...args) =>\n    new constructor(...args); // or Reflect.construct(constructor, args)",
    "swal({  \n    title: \"Good job!\",\n    text: \"Profile Update Successfully!\",\n    icon: \"success\",\n    button: \"Okay!\",\n}).then(confirm => {\n     if (confirm) window.location.reload();\n});",
    "Phaser.Actions.ShiftPosition(myObjects, 400, 300);",
    "const COLORS = [ 0x9bbc0f, 0x8bac0f, 0x306230, 0x0f380f ];\n\nclass DemoScene extends Phaser.Scene {\n    \n    preload(){\n       //create texture for the demo\n       let graphics  = this.make.graphics();\n       graphics.fillStyle( 0xff0000 );\n       graphics.fillRect(0, 0, 8, 8);\n       graphics.generateTexture(`texture`, 8, 8);\n    }\n\n    create () {\n        this.add.text(10,10,'Demo');\n        \n        this.snake = this.add.group();\n        \n        // create head\n        this.snake.create(100, 100, 'texture');\n       \n        // body part1\n        this.snake.create(90, 100, 'texture');    \n        // body part2\n        this.snake.create(80, 100, 'texture');    \n                \n        // move timer\n        this.lastStep  = 0\n        \n    }\n    \n    update (delta) {\n        //movement should be improved, this is just for the demo\n        \n        if(this.lastStep + 10 < delta ){\n        \n            let bodyParts = this.snake.getChildren();\n            let {x, y} = bodyParts[bodyParts.length - 1];\n            \n            // here the magic happens\n            Phaser.Actions.ShiftPosition( bodyParts, bodyParts[0].x + 1, bodyParts[0].y)   \n            \n            this.lastStep = delta\n            \n        }\n    }\n\n}\n\nvar config = {\n    width: 540,\n    height: 180,\n    scene: DemoScene,\n}; \n\nnew Phaser.Game(config);\n\nconsole.clear();\ndocument.body.style = 'margin:0;';",
    "<script src=\"//cdn.jsdelivr.net/npm/phaser/dist/phaser.min.js\"></script>",
    "// Input Variables\nlet createDigestModal = $(\"#create-digest-modal\");\nlet createDigestFormContainer = $(\"#create-digest-modal-form-container\");\nlet createDigestModalSubmitBtn = $(\"#create-digest-modal-btn\");\n\n// ========================================================================\n// Toggle the submit button to disabled / enabled based on required inputs\n// ========================================================================\nconst enableSubmitBtn = () => {\n  // Create digest form\n  createDigestFormContainer.on(\"keyup change\", () => {\n    let createDigestInputs = createDigestFormContainer.find(\".required\");\n    let requiredCreateDigestInputs = true;\n\n    for (let i = 0; i < createDigestInputs.length; i++) {\n      console.log(createDigestInputs[i].value);\n      if (\n        createDigestInputs[i].value == \"\"\n      ) {\n        requiredCreateDigestInputs = false;\n        break;\n      }\n    }\n\n    createDigestModalSubmitBtn.attr(\"disabled\", !requiredCreateDigestInputs);\n\n  });\n};\n\n// Invoke Function to toggle submit button\nenableSubmitBtn();",
    ".row {\n  margin-bottom: 1rem;\n}\n\n/* Required Fields */\n\n.required-field::after {\n  content: \"*\";\n  color: red;\n  margin-left: 2px;\n}\n\n.required-field-margin-left::after {\n  content: \"*\";\n  color: red;\n  margin-left: -2px;\n}",
    "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\n<!-- Create Digest Modal -->\n<div class=\"modal fade\" id=\"create-digest-modal\" tabindex=\"-1\" aria-labelledby=\"create-digest-modal-label\">\n\n  <form id=\"create-digest-modal-form-container\">\n    <!-- Project Input -->\n    <div class=\"row\">\n      <div class=\"col-40\">\n        <label class=\"required-field\" for=\"create-digest-modal-project-input\">Project</label>\n      </div>\n      <div>\n        <select class=\"form-select required\" id=\"create-digest-modal-project-input\" type=\"select\">\n\n          <option value=\"\">Select</option>\n          <option value=\"1\">Project 1</option>\n          <option value=\"2\">Project 2</option>\n        </select>\n      </div>\n    </div>\n    <!-- /Project Input -->\n\n    <!-- name input -->\n    <div class=\"row\">\n      <div id=\"create-digest-name-input\">\n        <label id=\"create-digest-modal-name-input-label\" for=\"create-digest-modal-name-input\" class=\"required-field\">Digest Name</label>\n      </div>\n\n      <div>\n        <input name=\"create-digest-modal-name-input\" type=\"text\" id=\"create-digest-modal-name-input\" class=\"required\" />\n      </div>\n    </div>\n    <!-- /name input -->\n\n    <!-- Type input -->\n    <div class=\"row\">\n      <div class=\"col-40\">\n        <label class=\"required-field\" for=\"create-digest-modal-type-input\">Type</label>\n      </div>\n      <div class=\"col-75 flex\">\n        <select class=\"form-select required\" aria-label=\"create-digest-modal-type-input\" id=\"create-digest-modal-type-input\" type=\"select\">\n          <option value=\"\">Select</option>\n          <option value=\"D\">Daily</option>\n          <option value=\"W\">Weekly</option>\n        </select>\n      </div>\n    </div>\n    <!-- /Type input -->\n\n    <!-- include summary input -->\n    <div id=\"create-digest-modal-summary-input-container\" class=\"row\">\n      <div class=\"col-40\">\n        <label class=\"form-check-label\" for=\"create-digest-modal-summary-input\">\n          Include Summary\n        </label>\n      </div>\n      <div class=\"col-75 flex\">\n        <input checked class=\"form-check-input\" type=\"checkbox\" id=\"create-digest-modal-summary-input\" />\n      </div>\n    </div>\n    <!-- /include summary input -->\n  </form>\n\n  <!-- Close/Update Buttons -->\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary modal-close-btn\" data-bs-dismiss=\"modal\" id=\"create-modal-close-btn\">\n      Close\n    </button>\n    <button type=\"button\" id=\"create-digest-modal-btn\" class=\"btn btn-success\" disabled>\n      Add Digest\n    </button>\n  </div>\n\n</div>\n<!-- Create Digest Modal -->",
    "let currentIndex = 0;\nconst slides = document.querySelectorAll('.slide');\nconst totalSlides = slides.length;\n\nfunction updateSlides() {\n  slides.forEach((slide, index) => {\n    if (index < currentIndex) {\n      slide.style.width = '0%';\n      slide.style.left = '0%';\n      slide.style.opacity = '0';\n      slide.style.visibility = 'hidden';\n      slide.style.transition = 'all 0.5s ease-out';\n    } else if (index === currentIndex) {\n    // Here\n      slide.style.width = null;\n      slide.style.right = '100%';\n      slide.style.opacity = '1';\n      slide.style.visibility = 'visible';\n      slide.style.transition = 'all 1s ease-out';\n    } else {\n      slide.style.opacity = '1';\n      slide.style.visibility = 'visible';\n      slide.style.transition = 'all 1s ease-out';\n\n    }\n  });\n}\n\n// Function for next slide (move forward)\nfunction nextSlide() {\n  if (currentIndex < totalSlides - 1) {\n    currentIndex++;\n    updateSlides();\n  }\n}\n\n// Function for previous slide (move backward)\nfunction prevSlide() {\n  if (currentIndex > 0) {\n    currentIndex--;\n    updateSlides();\n  }\n}\n\n// Event listeners for the navigation buttons\ndocument.querySelector('.next-button').addEventListener('click', nextSlide);\ndocument.querySelector('.prev-button').addEventListener('click', prevSlide);\n\n// Optionally, use the automatic slider function (if you want both auto and manual navigation)\n//setInterval(() => {\n//  nextSlide(); // This will trigger auto-sliding\n//}, 3000);",
    ".prev-button, .next-button {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  background-color: rgba(0, 0, 0, 0.5);\n  color: white;\n  border: none;\n  padding: 10px;\n  cursor: pointer;\n  font-size: 1.5em;\n  z-index: 10;\n}\n\n.prev-button {\n  left: 10px;\n}\n\n.next-button {\n  right: 10px;\n}\n\n.slider-container {\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  height: 280px;\n}\n\n.slider {\n  position: relative;\n  height: 100%;\n  width: 100%; /* Enough space for all 4 slides */\n  display: flex;\n  transition: transform 3s ease-in-out;\n}\n\n.slide {\n  position: absolute;\n  height: 100%;\n  transition: width 3s ease-in-out, left 3s ease-in-out;\n}\n\n.slide.yellow {\n  z-index: 4;\n  left: 0%;\n   width: calc(100% - 60px);\n}\n\n.slide.pink {\n  z-index: 3;\n  left: 0%; \n    width: calc(100% - 40px);\n}\n\n.slide.blue {\n  z-index: 2;\n  left: 0%; \n  width: calc(100% - 20px);\n}\n\n/* The background slide */\n.slide.green {\n  z-index: 1;\n  left: 0%; \n  width: 100%;\n}",
    "<!-- Navigation buttons -->\n  <button class=\"prev-button\">Previous</button>\n  <button class=\"next-button\">Next</button>\n\n<div class=\"slider-container\">\n    <div class=\"slider\">\n      <div class=\"slide yellow\" style=\"background-color: #ffea92\"><div class=\"content\">yellow</div></div> <!-- 1. Slide -->\n      <div class=\"slide pink\" style=\"background-color: #e2c6e0\"><div class=\"content\">pink</div></div> <!-- 2. Slide -->\n      <div class=\"slide blue\" style=\"background-color: #b9d7f3\"><div class=\"content\">blau</div></div> <!-- 3. Slide -->\n      <div class=\"slide green\" style=\"background-color: #8ebf1e\"><div class=\"content\">green</div></div> <!-- 4. Slide -->\n     \n    </div>\n  </div>",
    "$(document).ready(function() {\n  $(\"#playIt\").click(function() {\n    if (Tone.context.state !== \"running\") {\n      Tone.start(); \n    }\n    Tone.Transport.start();\n  });\n});\n\nconst player = new Tone.Player({\n  url: \"/tick.mp3\",\n  loop: false, // We handle repetition later\n  autostart: false\n}).toDestination();\n\nTone.Transport.bpm.value = 140;\nconst tickDuration = \"8n\"; // Adjust as needed\nconst cycleLength = \"4m\"; // Repeats every 4 measures\n\n// Schedule and repeat tick sounds\n[\"0:0:0\", \"0:1:0\", \"0:4:0\"].forEach(time => {\n  Tone.Transport.scheduleRepeat(t => {\n    player.start(t);\n    player.stop(t + Tone.Time(tickDuration));\n  }, cycleLength, time);\n});",
    "const isCancelled = useRef(false);\nuseMutation({\n  mutationFn: async () => {\n    isCancelled.current = false;\n    await firstTask()\n    // If you prefer, you could throw an error instead of returning\n    if (isCancelled.current) return;\n    await secondTask()\n    if (isCancelled.current) return;\n    await thirdTask()\n  },\n  ...\n})\n...\n<button onClick={() => { isCancelled.current = true }}/>",
    "const controller = useRef(null)\nuseMutation({\n  mutationFn: async () => {\n    controller.current = new AbortController();\n    const signal = controller.current.signal\n    await firstTask(signal); // change this code to use the signal\n    if (signal.aborted) return;\n    await secondTask(signal);\n    if (signal.aborted) return;\n    await thirdTask(signal);\n  },\n  ...\n})\n...\n<button onClick={() => { controller.current?.abort() }}/>",
    "public string[] Split (char[]? separator, StringSplitOptions options)",
    "public void LogMessage(string message)\n{\n    // ...\n    //DbScope is of type PayingContext. Made in GeneralService.cs\n    DbScope.PayLogs.Add(bettingHistory);\n    DbScope.SaveChanges(); //This line causes an error. \n}\n\npublic async Task LogMessageAsync(string message)\n{\n    // ...\n    DbScope.PayLogs.Add(bettingHistory);\n    await DbScope.SaveChangesAsync(); //This line causes an error. \n}",
    "public async ValueTask LogMessageAsync(string message, bool useAsync)\n{\n    // ...\n    DbScope.PayLogs.Add(bettingHistory);\n    if (useAsync)\n    {\n        await DbScope.SaveChangesAsync();\n    }\n    else\n    {\n        DbScope.SaveChanges();\n    }\n}",
    "<SidebarComponent @ref=\"sideBarComponent\"/>",
    "public class SidebarStateService\n{\n    public event Action? OnOverlayClicked;\n\n    public void OverlayClicked()\n    {\n        OnOverlayClicked?.Invoke();\n    }\n}",
    "DrawTreeNodeEventArgs e = new DrawTreeNodeEventArgs(g, node, bounds, (TreeNodeStates)(nmtvcd->nmcd.uItemState));\nOnDrawNode(e);\n\nif (e.DrawDefault)\n{\n    //Simulate default text drawing here\n    TreeNodeStates curState = e.State;\n\n    Font font = node.NodeFont ?? node.TreeView.Font;\n    Color color = (((curState & TreeNodeStates.Selected) == TreeNodeStates.Selected) && node.TreeView.Focused) ? SystemColors.HighlightText : (node.ForeColor != Color.Empty) ? node.ForeColor : node.TreeView.ForeColor;\n\n    // Draw the actual node.\n    if ((curState & TreeNodeStates.Selected) == TreeNodeStates.Selected)\n    {\n        g.FillRectangle(SystemBrushes.Highlight, bounds);\n        ControlPaint.DrawFocusRectangle(g, bounds, color, SystemColors.Highlight);\n        TextRenderer.DrawText(g, node.Text, font, bounds, color, TextFormatFlags.Default);\n    }\n    else\n    {\n        using var brush = BackColor.GetCachedSolidBrushScope();  // <- Notice\n        g.FillRectangle(brush, bounds);\n\n        TextRenderer.DrawText(g, node.Text, font, bounds, color, TextFormatFlags.Default);\n    }\n}",
    "private void tv_DrawNode(object sender, DrawTreeNodeEventArgs e)\n{\n    if (e.Node is null) return;\n    if (e.Node.IsEditing) return;\n\n    TreeNode node = e.Node;\n    bool selected = (e.State & TreeNodeStates.Selected) != 0;\n    bool focused = (e.State & TreeNodeStates.Focused) != 0;\n    bool highlight = selected && (focused || !node.TreeView.HideSelection);\n    Font font = node.NodeFont ?? node.TreeView.Font;\n    Color foreColor = highlight \n        ? SystemColors.HighlightText\n        : node.ForeColor.IsEmpty\n        ? node.TreeView.ForeColor\n        : node.ForeColor;\n    Color backColor = highlight\n        ? SystemColors.Highlight\n        : node.BackColor.IsEmpty\n        ? node.TreeView.BackColor\n        : node.BackColor;\n    Rectangle bounds = e.Bounds;\n\n    if (e.Node.TreeView.CheckBoxes)\n    {\n        bounds.Inflate(-1, 0);\n    }\n\n    using var brBack = new SolidBrush(backColor);\n\n    e.Graphics.FillRectangle(brBack, bounds);\n\n    TextRenderer.DrawText(\n        e.Graphics,\n        e.Node.Text,\n        font,\n        bounds,\n        foreColor,\n        TextFormatFlags.Left |\n        TextFormatFlags.VerticalCenter |\n        TextFormatFlags.SingleLine);\n\n    if (highlight && node.TreeView.Focused)\n    {\n        bounds.Width--;\n        bounds.Height--;\n        ControlPaint.DrawFocusRectangle(e.Graphics, bounds);\n    }            \n}",
    "public static async Task<Uri> CreateServiceSASBlob(\n    BlobClient blobClient,\n    string storedPolicyName = null)\n{\n    // Check if BlobContainerClient object has been authorized with Shared Key\n    if (blobClient.CanGenerateSasUri)\n    {\n        // Create a SAS token that's valid for one day\n        BlobSasBuilder sasBuilder = new BlobSasBuilder()\n        {\n            BlobContainerName = blobClient.GetParentBlobContainerClient().Name,\n            BlobName = blobClient.Name,\n            Resource = \"b\"\n        };\n\n        if (storedPolicyName == null)\n        {\n            sasBuilder.ExpiresOn = DateTimeOffset.UtcNow.AddDays(1);\n            sasBuilder.SetPermissions(BlobContainerSasPermissions.Read);\n        }\n        else\n        {\n            sasBuilder.Identifier = storedPolicyName;\n        }\n\n        Uri sasURI = blobClient.GenerateSasUri(sasBuilder);\n\n        return sasURI;\n    }\n    else\n    {\n        // Client object is not authorized via Shared Key\n        return null;\n    }\n}",
    "var sourceAccountName = \"devstoreaccount1\";\n    var sourceAccountKey = \"Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==\";\n    var sourceBlobEndpoint = $\"http://127.0.0.1:10000/{sourceAccountName}\";\n\n    var destinationAccountName = \"devstoreaccount2\";\n    var destinationAccountKey = \"Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==\";\n    var destinationBlobEndpoint = $\"http://127.0.0.1:10000/{destinationAccountName}\";\n\n    var sourceConnectionString = $\"DefaultEndpointsProtocol=http;AccountName={sourceAccountName};AccountKey={sourceAccountKey};BlobEndpoint={sourceBlobEndpoint}\";\n    var destinationConnectionString = $\"DefaultEndpointsProtocol=http;AccountName={destinationAccountName};AccountKey={destinationAccountKey};BlobEndpoint={destinationBlobEndpoint}\";\n\n    var sourceContainerName = \"srccontainer\";\n    var destinationContainerName = \"destcontainer\";\n\n    var sourceBlobName = \"myblob\";\n    var destinationBlobName = \"destblob\";\n\n    var sourceBlobServiceClient = new BlobServiceClient(sourceConnectionString);\n    var destinationBlobServiceClient = new BlobServiceClient(destinationConnectionString);\n\n    var sourceContainerClient = sourceBlobServiceClient.GetBlobContainerClient(sourceContainerName);\n    var sourceBlobClient = sourceContainerClient.GetBlobClient(sourceBlobName);\n    Uri blobSASURI = await CreateServiceSASBlob(sourceBlobClient);\n\n    var destinationContainerClient = destinationBlobServiceClient.GetBlobContainerClient(destinationContainerName);\n    var destinationBlobClient = destinationContainerClient.GetBlobClient(destinationBlobName);\n\n    await destinationContainerClient.CreateIfNotExistsAsync();\n\n    Console.WriteLine($\"Starting copy from {blobSASURI} to {destinationBlobClient.Uri}\");\n\n    var copyOperation = await destinationBlobClient.StartCopyFromUriAsync(blobSASURI);\n    await copyOperation.WaitForCompletionAsync();\n\n    Console.WriteLine(\"Copy completed\");"
]